INHERITANCE

What is it and why is it used?
-Provides a method (function) for creating new classes from existing classes 
-The new class contains the data and behaviours of existing class
-Allow for reuse of existing classes

In many applications, when you're designing your solution you can identify classes in your application that are related to one another.
Sometimes the relationship is clear and other times the relationship might be less clear.This line provides some examples of related classes in 
a game application.

Related classes:
-Player, Enemy, Level Boss, Hero, Super Player etc.
-Account, Saving Account, Checking Account, Trust Account etc.
-Person, Employee, Student, Faculty, Staff, Administrator etc.

Accounts - Without inheritance code dublication.

Class Account{
//balance, deposite, withdraw,....
};

Class Savings_Account{
//balance, deposite, withdraw,....
};

Class Checking_Account{
//balance, deposite, withdraw,....
};

Class Trust_Account{
//balance, deposite, withdraw,....
};

*********************************
Accounts - With inheritance code reuse.

Class Account{
//balance, deposite, withdraw,....
};

Class Savings_Account:public Account {
//balance, deposite, withdraw,....
};

Class Checking_Account: Public Account {
//balance, deposite, withdraw,....
};

Class Trust_Account:Public Account{
//balance, deposite, withdraw,....
};
***********************************

Single Inheritance: A new class is created from another 'single' classes.
Multiple Inheritance: A new class is created from two or more other classes.

Classes:
-A
-B is derived from A
-C is derived from A
-D is derived from C
-E is derived from D
Generalization:-->E<D<C<B<A
Specialization:-->A<B<C<D<E

Classes:
-Person
-Employee is derived from Person
-Student is derived from Person
-Faculty is derived from Employee
-Staff is derived from Employee
-Administrator is derived from Employee

Inheritance Versus Composition 

-Public Inheritance: is a relationship 
-Employee is a person 
-Checking account is a Account 
-Circle is a Shape

-Composition:has a relationship 
-Person has a Account 
-Player has a Special Attack 
-Circle has a Location 

      *********************
      Inheritance Challenge
      *********************
You are provided with a simple Account Class hierarchy that contains
Account-Base Class 
Saving Account-Derived Class

An Account has a name and a balance
A Savings Account is an Account and adds an interest rate.

I have also provided some Account helper functions in Account_Util.h and Account_Util.cpp
that make it easily display, deposit to and Withdraw from a vector of Accounts and Saving Accounts.

our challenging is the following:

1)Add a (Checking account class) to the Account Hierarchy
  A checking account has a name and a balance and has a fee of 1.50 per withdrawal transaction.
  Every Withdrawal transaction will be assessed this flat fee.
  
2)Add a (Trust account class) to the Account hierarchy
  A trust account has a name, a balance, and an interest rate
  The trust account deposit works just like a saving account deposit 
  However, any deposits of 5000.00 or more will receive a 50.00 bonus deposited to account
  
  Trust Account withdrawal should only allow 3 withdrawals per year and each of these must be less than 20% of the account balance.
  You dont have to keep track of calendar time for this application, just make sure 4th deposit fails 
  
  
  Hints:
  Reuse existing functionality!!
  Think about what the base class will be for the new classes.
  Add helper functions to account_util.h  and account_util.cpp if you work with your new classes.
  (you dont have to, but it will make your main much easier to use)
  
  Have fun!! You are no longer beginner C++ programmers.
  
          **************************
          Section Challenge Solution
          **************************
          
          
  class Checking_Account: public Account{ //inheritance class defn 
        friend std::ostream &operator <<(std::ostream &os, const Checking_Account &Account);
  private:
         static constexpr const char *def_name="Unnamed Checking Account";
         static constexpr double def_balance=0,0;
         static constexpr double per_check_fee=1.5;
  public:
         Checking Account(std::string name=def_name, double balance=def_balance);
         bool withdraw(double);
   };
  #endi
  
up to here, this is the checking_account.h file and we move on with the checking_account.cpp

#include Checking_Account.h

Checking_Account::Checking_Account(std::string name, double balance):
                 Account {name,balance} {
}

bool Checking_Account::withdraw(double amount){
      amount+=per_check_fee;
      return Account::withdraw(amount);
}

std::ostream &operator << (std::ostream &os, const Checking_Account &Account){
       os<<"[Checking_Account:"<< account.name << ":" << account.balance << "]";
       return os;
}

up to here we cretaed Checking_Account.cpp and now we will create Trust_Account.h.

#include "Saving_Account.h"

class Trust_Account: public: Saving_Account{
      friend std::ostream &operator << (std::ostream &os, const Trust_Account &account);
private:
      static constexpr const char *def_name="Unnamed Trust Account";
      static constexpr double def_balance=0.0;
      static constexpr double def_int_rate=0.0;
      static constexpr double bonus_amount=50.0;
      static constexpr double bonus_threshold=5000.0;
      static constexpr int max_withdrawals=3;
      static constexpr double max_withdraw_percent=0.2;
protected:
      int num_withdrawals;
public:
      Trust_Account(std::string name=def_name, double balance=def_balance, double int_rate=def_int_rate);
      bool deposit(double amount);
      bool withdraw(double amount);
 };
 #endif
 
 
 And here's the implementation file for the trust account 
 
 #include "Trust_Account.h"
 
 Trust_Account::Trust_Account(std::string name, double balance, double int_rate):
              Saving_Account{name, balance, int_rate} num_withdrawals{0}{
              }
 bool Trust_Account::deposit(double_amount)
                 
         
         





